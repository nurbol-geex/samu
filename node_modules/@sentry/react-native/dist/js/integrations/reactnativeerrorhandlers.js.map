{"version":3,"file":"reactnativeerrorhandlers.js","sourceRoot":"","sources":["../../../src/js/integrations/reactnativeerrorhandlers.ts"],"names":[],"mappings":"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","sourcesContent":["import type { EventHint, Integration, SeverityLevel } from '@sentry/core';\nimport { addExceptionMechanism, captureException, getClient, getCurrentScope, logger } from '@sentry/core';\n\nimport { createSyntheticError, isErrorLike } from '../utils/error';\nimport { RN_GLOBAL_OBJ } from '../utils/worldwide';\nimport { checkPromiseAndWarn, polyfillPromise, requireRejectionTracking } from './reactnativeerrorhandlersutils';\n\nconst INTEGRATION_NAME = 'ReactNativeErrorHandlers';\n\n/** ReactNativeErrorHandlers Options */\ninterface ReactNativeErrorHandlersOptions {\n  onerror: boolean;\n  onunhandledrejection: boolean;\n  patchGlobalPromise: boolean;\n}\n\ninterface PromiseRejectionTrackingOptions {\n  onUnhandled: (id: string, error: unknown) => void;\n  onHandled: (id: string) => void;\n}\n\n/** ReactNativeErrorHandlers Integration */\nexport const reactNativeErrorHandlersIntegration = (\n  options: Partial<ReactNativeErrorHandlersOptions> = {},\n): Integration => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce: () =>\n      setup({\n        onerror: true,\n        onunhandledrejection: true,\n        patchGlobalPromise: true,\n        ...options,\n      }),\n  };\n};\n\nfunction setup(options: ReactNativeErrorHandlersOptions): void {\n  options.onunhandledrejection && setupUnhandledRejectionsTracking(options.patchGlobalPromise);\n  options.onerror && setupErrorUtilsGlobalHandler();\n}\n\n/**\n * Setup unhandled promise rejection tracking\n */\nfunction setupUnhandledRejectionsTracking(patchGlobalPromise: boolean): void {\n  if (patchGlobalPromise) {\n    polyfillPromise();\n  }\n\n  attachUnhandledRejectionHandler();\n  checkPromiseAndWarn();\n}\n\nfunction attachUnhandledRejectionHandler(): void {\n  const tracking = requireRejectionTracking();\n\n  const promiseRejectionTrackingOptions: PromiseRejectionTrackingOptions = {\n    onUnhandled: (id, rejection = {}) => {\n      // eslint-disable-next-line no-console\n      console.warn(`Possible Unhandled Promise Rejection (id: ${id}):\\n${rejection}`);\n    },\n    onHandled: id => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Promise Rejection Handled (id: ${id})\\n` +\n          'This means you can ignore any previous messages of the form ' +\n          `\"Possible Unhandled Promise Rejection (id: ${id}):\"`,\n      );\n    },\n  };\n\n  tracking.enable({\n    allRejections: true,\n    onUnhandled: (id: string, error: unknown) => {\n      if (__DEV__) {\n        promiseRejectionTrackingOptions.onUnhandled(id, error);\n      }\n\n      captureException(error, {\n        data: { id },\n        originalException: error,\n        syntheticException: isErrorLike(error) ? undefined : createSyntheticError(),\n        mechanism: { handled: true, type: 'onunhandledrejection' },\n      });\n    },\n    onHandled: (id: string) => {\n      promiseRejectionTrackingOptions.onHandled(id);\n    },\n  });\n}\n\nfunction setupErrorUtilsGlobalHandler(): void {\n  let handlingFatal = false;\n\n  const errorUtils = RN_GLOBAL_OBJ.ErrorUtils;\n  if (!errorUtils) {\n    logger.warn('ErrorUtils not found. Can be caused by different environment for example react-native-web.');\n    return;\n  }\n\n  const defaultHandler = errorUtils.getGlobalHandler && errorUtils.getGlobalHandler();\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  errorUtils.setGlobalHandler(async (error: any, isFatal?: boolean) => {\n    // We want to handle fatals, but only in production mode.\n    const shouldHandleFatal = isFatal && !__DEV__;\n    if (shouldHandleFatal) {\n      if (handlingFatal) {\n        logger.log('Encountered multiple fatals in a row. The latest:', error);\n        return;\n      }\n      handlingFatal = true;\n    }\n\n    const client = getClient();\n\n    if (!client) {\n      logger.error('Sentry client is missing, the error event might be lost.', error);\n\n      // If there is no client something is fishy, anyway we call the default handler\n      defaultHandler(error, isFatal);\n\n      return;\n    }\n\n    const hint: EventHint = {\n      originalException: error,\n      attachments: getCurrentScope().getScopeData().attachments,\n    };\n    const event = await client.eventFromException(error, hint);\n\n    if (isFatal) {\n      event.level = 'fatal' as SeverityLevel;\n\n      addExceptionMechanism(event, {\n        handled: false,\n        type: 'onerror',\n      });\n    } else {\n      event.level = 'error';\n\n      addExceptionMechanism(event, {\n        handled: true,\n        type: 'generic',\n      });\n    }\n\n    client.captureEvent(event, hint);\n\n    if (__DEV__) {\n      // If in dev, we call the default handler anyway and hope the error will be sent\n      // Just for a better dev experience\n      defaultHandler(error, isFatal);\n      return;\n    }\n\n    void client.flush(client.getOptions().shutdownTimeout || 2000).then(\n      () => {\n        defaultHandler(error, isFatal);\n      },\n      (reason: unknown) => {\n        logger.error('[ReactNativeErrorHandlers] Error while flushing the event cache after uncaught error.', reason);\n      },\n    );\n  });\n}\n"]}