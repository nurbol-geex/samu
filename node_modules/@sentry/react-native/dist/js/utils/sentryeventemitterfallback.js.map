{"version":3,"file":"sentryeventemitterfallback.js","sourceRoot":"","sources":["../../../src/js/utils/sentryeventemitterfallback.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,kBAAkB,EAAE,MAAM,cAAc,CAAC;AAE1D,OAAO,EAAE,MAAM,EAAE,MAAM,YAAY,CAAC;AAEpC,OAAO,EAAE,wBAAwB,EAAE,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;AAEnF,MAAM,CAAC,MAAM,mBAAmB,GAAG,KAAM,CAAC;AAY1C;;GAEG;AACH,MAAM,UAAU,gCAAgC,CAC9C,UAA8B,wBAAwB,EAAE,EACxD,iBAAiB,GAAG,mBAAmB;IAEvC,IAAI,eAA0D,CAAC;IAC/D,IAAI,8BAAkD,CAAC;IACvD,IAAI,8BAAkD,CAAC;IAEvD,SAAS,iCAAiC;QACxC,6CAA6C;QAC7C,wEAAwE;QACxE,iEAAiE;QACjE,uPAAuP;QACvP,qBAAqB,CAAC,GAAG,EAAE;YACzB,IAAI,eAAe,KAAK,SAAS,EAAE;gBACjC,OAAO;aACR;YACD,8BAA8B,GAAG,kBAAkB,EAAE,CAAC;QACxD,CAAC,CAAC,CAAC;IACL,CAAC;IAED,SAAS,iCAAiC;QACxC,MAAM,CAAC,yBAAyB,EAAE;aAC/B,IAAI,CAAC,OAAO,CAAC,EAAE;YACd,IAAI,eAAe,KAAK,SAAS,EAAE;gBACjC,OAAO;aACR;YACD,8BAA8B,GAAG,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,SAAS,CAAC;QACxD,CAAC,CAAC;aACD,KAAK,CAAC,MAAM,CAAC,EAAE;YACd,MAAM,CAAC,KAAK,CAAC,8CAA8C,EAAE,MAAM,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;IACP,CAAC;IAED,OAAO;QACL,SAAS;YACP,OAAO,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;QACvC,CAAC;QAED,YAAY,CAAC,QAAgD;YAC3D,8BAA8B,GAAG,SAAS,CAAC;YAC3C,8BAA8B,GAAG,SAAS,CAAC;YAE3C,MAAM,gBAAgB,GAAG,CAAC,KAAoB,EAAQ,EAAE;gBACtD,IAAI,eAAe,KAAK,SAAS,EAAE;oBACjC,YAAY,CAAC,eAAe,CAAC,CAAC;oBAC9B,eAAe,GAAG,SAAS,CAAC;iBAC7B;gBACD,8BAA8B,GAAG,SAAS,CAAC;gBAC3C,8BAA8B,GAAG,SAAS,CAAC;gBAC3C,QAAQ,CAAC,KAAK,CAAC,CAAC;YAClB,CAAC,CAAC;YACF,eAAe,GAAG,UAAU,CAAC,GAAG,EAAE;gBAChC,IAAI,8BAA8B,EAAE;oBAClC,MAAM,CAAC,GAAG,CAAC,4CAA4C,CAAC,CAAC;oBACzD,OAAO,QAAQ,CAAC;wBACd,0BAA0B,EAAE,8BAA8B;wBAC1D,UAAU,EAAE,IAAI;qBACjB,CAAC,CAAC;iBACJ;qBAAM,IAAI,8BAA8B,EAAE;oBACzC,MAAM,CAAC,GAAG,CAAC,yFAAyF,CAAC,CAAC;oBACtG,OAAO,QAAQ,CAAC;wBACd,0BAA0B,EAAE,8BAA8B;wBAC1D,UAAU,EAAE,IAAI;qBACjB,CAAC,CAAC;iBACJ;qBAAM;oBACL,OAAO,CAAC,cAAc,CAAC,iBAAiB,EAAE,gBAAgB,CAAC,CAAC;oBAC5D,MAAM,CAAC,KAAK,CAAC,2CAA2C,CAAC,CAAC;iBAC3D;YACH,CAAC,EAAE,iBAAiB,CAAC,CAAC;YAEtB,iCAAiC,EAAE,CAAC;YACpC,iCAAiC,EAAE,CAAC;YACpC,OAAO,CAAC,IAAI,CAAC,iBAAiB,EAAE,gBAAgB,CAAC,CAAC;QACpD,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["import { logger, timestampInSeconds } from '@sentry/core';\n\nimport { NATIVE } from '../wrapper';\nimport type { NewFrameEvent, SentryEventEmitter } from './sentryeventemitter';\nimport { createSentryEventEmitter, NewFrameEventName } from './sentryeventemitter';\n\nexport const FALLBACK_TIMEOUT_MS = 10_000;\n\nexport type FallBackNewFrameEvent = { newFrameTimestampInSeconds: number; isFallback?: boolean };\nexport interface SentryEventEmitterFallback {\n  /**\n   * Initializes the fallback event emitter\n   * This method is synchronous in JS but the event emitter starts asynchronously.\n   */\n  initAsync: () => void;\n  onceNewFrame: (listener: (event: FallBackNewFrameEvent) => void) => void;\n}\n\n/**\n * Creates emitter that allows to listen to UI Frame events when ready.\n */\nexport function createSentryFallbackEventEmitter(\n  emitter: SentryEventEmitter = createSentryEventEmitter(),\n  fallbackTimeoutMs = FALLBACK_TIMEOUT_MS,\n): SentryEventEmitterFallback {\n  let fallbackTimeout: ReturnType<typeof setTimeout> | undefined;\n  let animationFrameTimestampSeconds: number | undefined;\n  let nativeNewFrameTimestampSeconds: number | undefined;\n\n  function getAnimationFrameTimestampSeconds(): void {\n    // https://reactnative.dev/docs/timers#timers\n    // NOTE: The current implementation of requestAnimationFrame is the same\n    // as setTimeout(0). This isn't exactly how requestAnimationFrame\n    // is supposed to work on web, so it doesn't get called when UI Frames are rendered.: https://github.com/facebook/react-native/blob/5106933c750fee2ce49fe1945c3e3763eebc92bc/packages/react-native/ReactCommon/react/runtime/TimerManager.cpp#L442-L443\n    requestAnimationFrame(() => {\n      if (fallbackTimeout === undefined) {\n        return;\n      }\n      animationFrameTimestampSeconds = timestampInSeconds();\n    });\n  }\n\n  function getNativeNewFrameTimestampSeconds(): void {\n    NATIVE.getNewScreenTimeToDisplay()\n      .then(resolve => {\n        if (fallbackTimeout === undefined) {\n          return;\n        }\n        nativeNewFrameTimestampSeconds = resolve ?? undefined;\n      })\n      .catch(reason => {\n        logger.error('Failed to receive Native fallback timestamp.', reason);\n      });\n  }\n\n  return {\n    initAsync() {\n      emitter.initAsync(NewFrameEventName);\n    },\n\n    onceNewFrame(listener: (event: FallBackNewFrameEvent) => void) {\n      animationFrameTimestampSeconds = undefined;\n      nativeNewFrameTimestampSeconds = undefined;\n\n      const internalListener = (event: NewFrameEvent): void => {\n        if (fallbackTimeout !== undefined) {\n          clearTimeout(fallbackTimeout);\n          fallbackTimeout = undefined;\n        }\n        animationFrameTimestampSeconds = undefined;\n        nativeNewFrameTimestampSeconds = undefined;\n        listener(event);\n      };\n      fallbackTimeout = setTimeout(() => {\n        if (nativeNewFrameTimestampSeconds) {\n          logger.log('Native event emitter did not reply in time');\n          return listener({\n            newFrameTimestampInSeconds: nativeNewFrameTimestampSeconds,\n            isFallback: true,\n          });\n        } else if (animationFrameTimestampSeconds) {\n          logger.log('[Sentry] Native event emitter did not reply in time. Using JavaScript fallback emitter.');\n          return listener({\n            newFrameTimestampInSeconds: animationFrameTimestampSeconds,\n            isFallback: true,\n          });\n        } else {\n          emitter.removeListener(NewFrameEventName, internalListener);\n          logger.error('Failed to receive any fallback timestamp.');\n        }\n      }, fallbackTimeoutMs);\n\n      getNativeNewFrameTimestampSeconds();\n      getAnimationFrameTimestampSeconds();\n      emitter.once(NewFrameEventName, internalListener);\n    },\n  };\n}\n"]}